def ePrimo(p):
    for i in range(2, p):
        if i > p/2:
            return True
        if p%i == 0:
            return False
            
    return True

def complete(k,c):
    return len(c) == k

def extensions(k,c):
    if not c: # lista vazia
        return [n for n in range(1, k+1)]
    elif len(c) == k - 1: # falta 1 para terminar, o anel Ã© circular 
        return [n for n in range(1,k+1) if ePrimo(n + c[-1]) and ePrimo(n + c[0]) and n not in c]
    else:
        return [n for n in range(1,k+1) if ePrimo(n + c[-1]) and n not in c]
        
def valid(k,c):
    return True
    
def aux(k,c):
    if complete(k,c):
        return valid(k,c)
    for x in extensions(k,c):
        c.append(x)
        if aux(k,c):
            return True
        c.pop()
    return False

def anel(n):
    c = []
    if aux(n, c):
        return c